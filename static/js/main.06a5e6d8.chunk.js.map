{"version":3,"sources":["ReduxStore/Reducers/SubRedditPostsSlice.js","Pages/SubRedditPage/SubRedditPage.js","Pages/RedirectPage/RedirectPage.js","ReduxStore/Reducers/userPostsSlice.js","Pages/UserPage/UserPage.js","Helper/ScrollToTop.js","Router/Router.js","ReduxStore/store.js","App/App.js","reportWebVitals.js","index.js","Components/SkeletonFolder/Layouts/Skeleton.js","API_Calls/RedditApiCalls.js","Helper/NumberFormat.js","Helper/time.js","Components/SubRowDisplay/SubRowDisplay.js","Components/NavBar/SearchBar.js","Components/NavBar/NavBar.js","Components/SkeletonFolder/SubReddits/SubRedditLayout.js","Components/FloatingBar/FloatingBar.js","Components/SubReddit/SubReddit.js","Components/FilterPage/FilterPage.js","Components/Card/AboutCard/AboutCard.js","Components/Card/UserCard/UserCard.js","Components/SideBar/SideBar.js","Components/ComponentLayout/ComponentLayout.js","Components/SkeletonFolder/Card/CardLayout.js","Components/Card/ErrorCard/ErrorCard.js","Components/Post/Post.js","ReduxStore/Reducers/SubRedditSlice.js","ReduxStore/Reducers/SubRedditAboutSlice.js","ReduxStore/Reducers/userAboutSlice.js","Components/Card/Card.js","ReduxStore/Reducers/PostsSlice.js","ReduxStore/Reducers/CommentSlice.js"],"names":["getSubRedditPosts","createAsyncThunk","param","thunkAPI","a","subredditPosts","response","getSubRedditPostsReducer","createSlice","name","initialState","status","isLoading","subredditpostsData","isError","error","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer","SubRedditPage","pathname","useParams","dispatch","useDispatch","useSelector","subRedditPosts","useEffect","subreddittype","ErrorCard","message","ComponentLayout","map","index","CardLayout","sideBarProps","about","Post","postData","data","children","RedirectPage","id","class","Button","component","Link","to","variant","startIcon","getuserPosts","userPosts","getuserPostsReducer","userpostsData","UserPage","username","user","ScrollToTop","props","useLocation","prevLocation","useRef","current","window","scroll","HomePage","lazy","CommentsPage","PageRoutes","Suspense","fallback","Skeleton","path","element","exact","posts","postsReducer","comments","commentReducer","subReddit","subredditReducer","subredditAbout","subredditAboutReducer","userAbout","userAboutReducer","store","configureStore","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SkeletonElement","type","classes","base_url","fetchPostData","parameter","fetch","fetchData","json","jsondata","Error","subreddit","commentFetch","fetchParams","jsonresponse","redditSearch","numberFormat","count","number","parseInt","toFixed","Date","getTimeDate","date","created","createdDate","toDateString","createdTime","toTimeString","substr","substring","postCreation","array","arrayValue","day_Diff","getTime","getSeconds","split","currentDayCalculation","difference","Math","floor","hrstoSec","minToSec","min","hour","SubRowDisplay","style","textDecoration","color","displayName","displayImg","src","alt","fontSize","textTransform","subscribersCount","SearchBar","navigate","useNavigate","useState","query","setQuery","display","setDisplay","options","setOptions","loading","setLoading","loadOptions","result","display_name","value","subscribers","icon_img","console","log","alignItems","border","placeholder","onBlur","setTimeout","onChange","e","target","length","CircularProgress","marginRight","size","option","onClick","NavBar","stroke","fill","strokeWidth","viewBox","height","width","xmlns","d","paddingLeft","justifyContent","rel","href","SubRedditLayoutRow","paddingRight","SubRedditLayout","FloatingBar","SubReddit","subredditData","getAllSubReddit","filteredData","url","key","filterOptions","icon","styles","createTheme","makeStyles","theme","listItem","fontWeight","background","palette","warning","main","activeLink","link","text","primary","FilterSide","maxWidth","isActive","ListItem","padding","ListItemIcon","ListItemText","AboutCard","subredditaboutData","getsubredditAbout","public_description","title","marginLeft","accounts_active","UserCard","useraboutData","getuserAbout","userData","banner_img","zIndex","paddingBottom","snoovatar_img","comment_karma","SideBar","filter","textAlign","backgroundColor","margin","setData","kind","author","thumbnail","ups","score","upvoteRatio","upvote_ratio","permalink","post_hint","isGallery","is_gallery","galleryData","gallery_data","selfText","selftext","hsl_video","secure_media","created_utc","numComments","num_comments","Card","hls","videoElement","Hls","isSupported","undefined","video_url","reddit_video","hls_url","loadSource","attachMedia","image","Image","match","toUpperCase","flexWrap","lineHeight","get_data","get_date","nolink","comment","WebkitLineClamp","onEnter","play","catch","err","onLeave","pause","topOffset","bottomOffset","muted","maxHeight","preload","ref","video","volume","sectiondata","getAllPosts","postsData","getComments","commentData"],"mappings":"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","file":"static/js/main.06a5e6d8.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { subredditPosts } from \"../../API_Calls/RedditApiCalls\";\r\n\r\nexport const getSubRedditPosts = createAsyncThunk(\r\n  \"subreddit/allPosts\",\r\n  async (param, thunkAPI) => {\r\n    const response = await subredditPosts(param);\r\n    return response;\r\n  }\r\n);\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  subredditpostsData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nconst getSubRedditPostsSlice = createSlice({\r\n  name: \"subredditPosts\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getSubRedditPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    },\r\n    [getSubRedditPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.status = \"succeeded\";\r\n      state.subredditpostsData = action.payload;\r\n    },\r\n    [getSubRedditPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.status = \"failed\";\r\n      state.error = action.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const getSubRedditPostsReducer = getSubRedditPostsSlice.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport ComponentLayout from \"../../Components/ComponentLayout/ComponentLayout\";\r\nimport { getSubRedditPosts } from \"../../ReduxStore/Reducers/SubRedditPostsSlice\";\r\nimport Post from \"../../Components/Post/Post\";\r\nimport CardLayout from \"../../Components/SkeletonFolder/Card/CardLayout\";\r\nimport ErrorCard from \"../../Components/Card/ErrorCard/ErrorCard\";\r\nconst SubRedditPage = () => {\r\n  const pathname = useParams();\r\n  const dispatch = useDispatch();\r\n  const { isLoading, isError, error, subredditpostsData } = useSelector(\r\n    (state) => {\r\n      return state.subRedditPosts;\r\n    }\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getSubRedditPosts(pathname.subreddittype));\r\n\r\n    return () => {};\r\n  }, [pathname.subreddittype]);\r\n  if (isError) {\r\n    return <ErrorCard error={error.message} />;\r\n  }\r\n  if (isLoading) {\r\n    return (\r\n      <ComponentLayout>\r\n        {[1, 2, 3, 4, 5, 6].map((index) => (\r\n          <CardLayout key={index} />\r\n        ))}\r\n      </ComponentLayout>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <ComponentLayout\r\n        sideBarProps={{ about: true, subreddittype: pathname.subreddittype }}\r\n      >\r\n        <Post postData={subredditpostsData.data.children} />\r\n      </ComponentLayout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubRedditPage;\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Link} from 'react-router-dom'\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport \"./RedirectPage.css\";\r\nconst RedirectPage = () => {\r\n  return (\r\n    <div id=\"notfound\">\r\n      <div class=\"notfound\">\r\n        <div class=\"notfound-404\">\r\n          <h3>Oops! Page not found</h3>\r\n          <h1>\r\n            <span>4</span>\r\n            <span>0</span>\r\n            <span>4</span>\r\n          </h1>\r\n        </div>\r\n        <h2>we are sorry, but the page you requested was not found</h2>\r\n        <Button component={Link} to=\"/\" variant=\"outlined\" startIcon={<ArrowBackIosIcon />}>\r\n          HomePage\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedirectPage;\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { userPosts } from \"../../API_Calls/RedditApiCalls\";\r\n\r\n\r\nexport const getuserPosts = createAsyncThunk(\r\n  \"user/allPosts\",\r\n  async (param, thunkAPI) => {\r\n    const response = await userPosts(param);\r\n    return response;\r\n  }\r\n);\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  userpostsData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nconst getuserPostsSlice = createSlice({\r\n  name: \"userPosts\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getuserPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    },\r\n    [getuserPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.status = \"succeeded\";\r\n      state.userpostsData = action.payload;\r\n    },\r\n    [getuserPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.status = \"failed\";\r\n      state.error = action.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const getuserPostsReducer = getuserPostsSlice.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { getuserPosts } from \"../../ReduxStore/Reducers/userPostsSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport ComponentLayout from \"../../Components/ComponentLayout/ComponentLayout\";\r\nimport Post from \"../../Components/Post/Post\";\r\nimport CardLayout from \"../../Components/SkeletonFolder/Card/CardLayout\";\r\nimport ErrorCard from \"../../Components/Card/ErrorCard/ErrorCard\";\r\nconst UserPage = () => {\r\n  const dispatch = useDispatch();\r\n  const pathname = useParams();\r\n  const { isLoading, isError, userpostsData, error } = useSelector(\r\n    (state) => state.userPosts\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getuserPosts(pathname.username));\r\n    return () => {};\r\n  }, [pathname.username]);\r\n  if (isError) {\r\n    return <ErrorCard error={error.message} />;\r\n  }\r\n  if (isLoading) {\r\n    return (\r\n      <ComponentLayout>\r\n        {[1, 2, 3, 4, 5, 6].map((index) => (\r\n          <CardLayout key={index} />\r\n        ))}\r\n      </ComponentLayout>\r\n    );\r\n  }\r\n \r\n  return (\r\n    <ComponentLayout sideBarProps={{ user: true, username: pathname.username }}>\r\n      <Post postData={userpostsData.data.children} />\r\n    </ComponentLayout>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst ScrollToTop = (props) => {\r\n  const { pathname } = useLocation();\r\n  const prevLocation = useRef();\r\n  useEffect(() => {\r\n    if (pathname != prevLocation) {\r\n      prevLocation.current = pathname;\r\n      window.scroll(0, 0);\r\n    }\r\n  }, [pathname]);\r\n\r\n  return props.children;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React, { lazy } from \"react\";\r\n\r\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nimport SubRedditPage from \"../Pages/SubRedditPage/SubRedditPage\";\r\nimport RedirectPage from \"../Pages/RedirectPage/RedirectPage\";\r\nimport UserPage from \"../Pages/UserPage/UserPage\";\r\nimport ScrollToTop from \"../Helper/ScrollToTop\";\r\nimport SkeletonElement from \"../Components/SkeletonFolder/Layouts/Skeleton\";\r\n\r\nconst HomePage = lazy(() => import(\"../Pages/HomePage/HomePage\"));\r\nconst CommentsPage = lazy(() => import(\"../Pages/CommentsPage/CommentsPage\"));\r\n\r\nconst PageRoutes = () => {\r\n  return (\r\n    <React.Suspense fallback={<SkeletonElement />}>\r\n      <Router>\r\n        <ScrollToTop>\r\n          <Routes>\r\n <Route path='*'  element={<RedirectPage />} />\r\n            <Route path=\"/\" exact element={<HomePage />} />\r\n            <Route\r\n              path=\"/:subreddit/comments/:id\"\r\n              exact\r\n              element={<CommentsPage />}\r\n            />\r\n            <Route path=\"/filter/:filtertype\" exact element={<HomePage />} />\r\n            <Route\r\n              path=\"/subreddit/:subreddittype\"\r\n              exact\r\n              element={<SubRedditPage />}\r\n            />\r\n            <Route path=\"/user/:username\" exact element={<UserPage />} />\r\n           \r\n          </Routes>\r\n        </ScrollToTop>\r\n      </Router>\r\n    </React.Suspense>\r\n  );\r\n};\r\nexport default PageRoutes;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { postsReducer } from \"./Reducers/PostsSlice\";\r\nimport { commentReducer } from \"./Reducers/CommentSlice\";\r\nimport { subredditReducer } from \"./Reducers/SubRedditSlice\";\r\nimport { getSubRedditPostsReducer } from \"./Reducers/SubRedditPostsSlice\";\r\nimport { subredditAboutReducer } from \"./Reducers/SubRedditAboutSlice\";\r\nimport { userAboutReducer } from \"./Reducers/userAboutSlice\";\r\nimport { getuserPostsReducer } from \"./Reducers/userPostsSlice\";\r\nconst reducer = {\r\n  posts: postsReducer,\r\n  comments: commentReducer,\r\n  subReddit: subredditReducer,\r\n  subRedditPosts: getSubRedditPostsReducer,\r\n  subredditAbout: subredditAboutReducer,\r\n  userAbout: userAboutReducer,\r\n  userPosts: getuserPostsReducer,\r\n};\r\nexport const store = configureStore({\r\n  reducer,\r\n});\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport PageRoutes from \"../Router/Router\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../ReduxStore/store\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <PageRoutes />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\r\nimport \"./Skeleton.css\";\r\n\r\nconst SkeletonElement = ({ type }) => {\r\n  const classes = `skeleton ${type}`;\r\n  return (\r\n    <>\r\n      <div className={classes}></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SkeletonElement;\r\n","const base_url = \"https://www.reddit.com\";\r\n\r\nexport const fetchPostData = async (parameter) => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/r/popular/${parameter}.json`);\r\n  \r\n    const jsondata = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      const data = jsondata.data.children;\r\n      return data;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const subreddit = async () => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/subreddits.json`);\r\n    const jsondata = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      const data = jsondata.data.children.map((subreddit) => {\r\n        return subreddit;\r\n      });\r\n\r\n      return data;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const commentFetch = async (fetchParams) => {\r\n  const { subreddit, id } = fetchParams;\r\n\r\n  try {\r\n    const fetchData = await fetch(\r\n      `${base_url}/r/${subreddit}/comments/${id}/.json`\r\n    );\r\n    const jsonresponse = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const subredditPosts = async (subreddit) => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/r/${subreddit}/.json`);\r\n    const jsonresponse = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const subredditAbout = async (subreddit) => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/r/${subreddit}/about.json`);\r\n    const jsonresponse = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const userAbout = async (user) => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/user/${user}/about.json`);\r\n    const jsonresponse = await fetchData.json();\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const userPosts = async (user) => {\r\n  try {\r\n    const fetchData = await fetch(`${base_url}/user/${user}/.json`);\r\n    const jsonresponse = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n\r\nexport const redditSearch = async (param, type = \"sr\") => {\r\n  try {\r\n    const fetchData = await fetch(\r\n      `${base_url}/search.json?q=${param}&type=${type}`\r\n    );\r\n    const jsonresponse = await fetchData.json();\r\n\r\n    if (fetchData.status === 200) {\r\n      return jsonresponse;\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err.message || \"failed to fetch\");\r\n  }\r\n};\r\n","export const numberFormat = (count) => {\r\n  const number = parseInt(count);\r\n  if (number < 1000) {\r\n    return number;\r\n  } else if (number >= 1000 && number < 10000) {\r\n    return (number / 1000).toFixed(2) + \" k\";\r\n  } else if (number >= 10000 && number < 100000) {\r\n    return (number / 1000).toFixed(2) + \" k\";\r\n  } else if (number >= 100000 && number < 1000000) {\r\n    return (number / 100000).toFixed(2) + \" L\";\r\n  } else if (number >= 100000 && number < 10000000) {\r\n    return (number / 100000).toFixed(2) + \" L\";\r\n  } else if (number >= 10000000 && number < 100000000) {\r\n    return (number / 10000000).toFixed(2) + \" Cr\";\r\n  }\r\n};\r\n","export const date = new Date();\r\n\r\nexport const getTimeDate = (date) => {\r\n  let created = new Date(date);\r\n  let createdDate = created.toDateString();\r\n  let createdTime = created.toTimeString().substr(0, 8);\r\n  return [createdDate.substring(3), createdTime, date];\r\n};\r\n\r\nexport const postCreation = (array) => {\r\n  const current = new Date();\r\n  let currentDate = current.toDateString();\r\n  let currentTime = current.toTimeString().substr(0, 8);\r\n  const arrayValue = new Date(array[2]);\r\n  const day_Diff =\r\n    (current.getTime() - arrayValue.getTime()) / (1000 * 60 * 60 * 24);\r\n  if (day_Diff < 0.5) {\r\n    let createdTime = getSeconds(array[1].split(\":\"));\r\n    let difference = createdTime;\r\n    return currentDayCalculation(difference);\r\n  } else if (day_Diff > 0.5 && day_Diff < 1) {\r\n    let difference = (current.getTime() - arrayValue.getTime()) / 1000;\r\n    return currentDayCalculation(difference);\r\n  } else if (day_Diff >= 1 && day_Diff <= 7) {\r\n    if (day_Diff < 2) {\r\n      return `${Math.floor(day_Diff)} day ago`;\r\n    }\r\n    return `${Math.floor(day_Diff)} days ago`;\r\n  } else {\r\n    return array[0];\r\n  }\r\n};\r\n\r\nconst getSeconds = (array) => {\r\n  let hrstoSec = parseInt(array[0]) * 3600;\r\n  let minToSec = parseInt(array[1]) * 60;\r\n  let sec = parseInt(array[2]) + hrstoSec + minToSec;\r\n  return sec;\r\n};\r\n\r\nconst currentDayCalculation = (difference) => {\r\n  switch (true) {\r\n    case difference < 60: {\r\n      return `${difference} seconds ago`;\r\n    }\r\n    case difference > 60 && difference < 3600: {\r\n      let min = Math.floor(difference / 60);\r\n\r\n      if (min < 5) {\r\n        return `${min} minute ago`;\r\n      } else {\r\n        return `${min} minutes ago`;\r\n      }\r\n    }\r\n    case difference >= 3600: {\r\n      let hour = Math.floor(difference / 3600);\r\n      if (hour <= 1) {\r\n        return `${hour} hour ago`;\r\n      } else {\r\n        return `${hour} hours ago`;\r\n      }\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { BsReddit } from \"react-icons/bs\";\r\nimport \"./SubRowDisplay.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { numberFormat } from \"../../Helper/NumberFormat.js\";\r\nexport default function SubRowDisplay(props) {\r\n  const DisplayImg = () => {\r\n    if (props.displayImg === null || props.displayImg === \"\") {\r\n      return <BsReddit className=\"display-icon\" />;\r\n    } else {\r\n      return (\r\n        <img\r\n          className=\"display-icon\"\r\n          \r\n          src={props.displayImg}\r\n          alt={props.displayName}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"display-anchor\">\r\n      <Link\r\n        style={{ textDecoration: \"none\", color: \"black\" }}\r\n        to={`/subreddit/${props.displayName}`}\r\n      >\r\n        <div className=\"sub-row-display\">\r\n          {DisplayImg()}\r\n          <div className=\"display-text\">\r\n            <span>{props.displayName}</span>{\" \"}\r\n            <p\r\n              style={{ color: \"grey\", fontSize: \"15px\", textTransform: \"none\" }}\r\n            >\r\n              {numberFormat(props.subscribersCount)} subscribers\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { components } from \"react-select\";\r\nimport { redditSearch } from \"../../API_Calls/RedditApiCalls\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"./NavBar.css\";\r\nimport SubRowDisplay from \"../SubRowDisplay/SubRowDisplay\";\r\n\r\nconst data = [\r\n  {\r\n    id: 0,\r\n    name: \"Cornelia Leon\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Joyce Shepard\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Beatriz Davenport\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Narayanaan\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Balaji\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Seshan\",\r\n  },\r\n];\r\n\r\nconst SearchBar = () => {\r\n  const navigate = useNavigate();\r\n  const [query, setQuery] = useState(\"\");\r\n  const [display, setDisplay] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const displayOptions = () => {\r\n    if (options.length === 0) {\r\n      return (\r\n        <div className=\"search-results\">\r\n          <p>Searching...</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"search-results-options\">\r\n          {options.map((option, index) => {\r\n            return (\r\n              <div\r\n                onClick={() => {\r\n                  navigate(`/subreddit/${option.displayName}`);\r\n                }}\r\n              >\r\n                <SubRowDisplay key={index} {...option} />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const loadOptions = async (query) => {\r\n    try {\r\n      const response = await redditSearch(query);\r\n      const result = response.data.children.map((data) => {\r\n        return {\r\n          displayName: data.data.display_name,\r\n          value: data.data.display_name,\r\n          subscribersCount: data.data.subscribers,\r\n          displayImg: data.data.icon_img,\r\n        };\r\n      });\r\n      setOptions(result);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <div className=\"search-input-div\">\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            border: \"1px solid black\",\r\n          }}\r\n        >\r\n          <input\r\n            className=\"search-input\"\r\n            type=\"text\"\r\n            placeholder=\"search..\"\r\n            value={query}\r\n            onBlur={() => {\r\n              setTimeout(() => {\r\n                setDisplay(false);\r\n                setLoading(false);\r\n              }, 200);\r\n            }}\r\n            onChange={(e) => {\r\n              if (e.target.value.length > 0) {\r\n                setDisplay(true);\r\n                setLoading(true);\r\n                if (e.target.value.length > 2) loadOptions(e.target.value);\r\n                else setOptions([]);\r\n              } else {\r\n                setDisplay(false);\r\n                setLoading(false);\r\n              }\r\n              setQuery(e.target.value);\r\n            }}\r\n          />\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ marginRight: \"0.3rem\" }}\r\n              size={20}\r\n              color=\"inherit\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"search-results\">{display && displayOptions()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport \"./NavBar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiFillGithub } from \"react-icons/ai\";\r\nexport default function NavBar() {\r\n  return (\r\n    <header className=\"navheader\">\r\n      <Link\r\n        style={{\r\n          textDecoration: \"none\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n        }}\r\n        to={{\r\n          pathname: \"/\",\r\n        }}\r\n      >\r\n        <div className=\"logo\">\r\n          <svg\r\n            stroke=\"currentColor\"\r\n            fill=\"currentColor\"\r\n            strokeWidth=\"0\"\r\n            viewBox=\"0 0 512 512\"\r\n            className=\"logo-icon\"\r\n            height=\"2em\"\r\n            width=\"2em\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path d=\"M201.5 305.5c-13.8 0-24.9-11.1-24.9-24.6 0-13.8 11.1-24.9 24.9-24.9 13.6 0 24.6 11.1 24.6 24.9 0 13.6-11.1 24.6-24.6 24.6zM504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-132.3-41.2c-9.4 0-17.7 3.9-23.8 10-22.4-15.5-52.6-25.5-86.1-26.6l17.4-78.3 55.4 12.5c0 13.6 11.1 24.6 24.6 24.6 13.8 0 24.9-11.3 24.9-24.9s-11.1-24.9-24.9-24.9c-9.7 0-18 5.8-22.1 13.8l-61.2-13.6c-3-.8-6.1 1.4-6.9 4.4l-19.1 86.4c-33.2 1.4-63.1 11.3-85.5 26.8-6.1-6.4-14.7-10.2-24.1-10.2-34.9 0-46.3 46.9-14.4 62.8-1.1 5-1.7 10.2-1.7 15.5 0 52.6 59.2 95.2 132 95.2 73.1 0 132.3-42.6 132.3-95.2 0-5.3-.6-10.8-1.9-15.8 31.3-16 19.8-62.5-14.9-62.5zM302.8 331c-18.2 18.2-76.1 17.9-93.6 0-2.2-2.2-6.1-2.2-8.3 0-2.5 2.5-2.5 6.4 0 8.6 22.8 22.8 87.3 22.8 110.2 0 2.5-2.2 2.5-6.1 0-8.6-2.2-2.2-6.1-2.2-8.3 0zm7.7-75c-13.6 0-24.6 11.1-24.6 24.9 0 13.6 11.1 24.6 24.6 24.6 13.8 0 24.9-11.1 24.9-24.6 0-13.8-11-24.9-24.9-24.9z\"></path>\r\n          </svg>\r\n          <div className=\"nav-title\" style={{ paddingLeft: 10 }}>\r\n            Reddit<span style={{ color: \"black\" }}> Minimal</span>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <div className=\"search\">\r\n        <SearchBar />\r\n      </div>\r\n      <div\r\n        style={{\r\n          textDecoration: \"none\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginRight:'0.7rem'\r\n        }}\r\n      >\r\n        <a\r\n          style={{\r\n            textDecoration: \"none\",\r\n           \r\n          }}\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          href=\"https://github.com/narayanan-srinivasan37/reddit-minimal\"\r\n        >\r\n          <AiFillGithub color=\"black\" size={30} />\r\n        </a>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SkeletonElement from \"../Layouts/Skeleton\";\r\n\r\nconst SubRedditLayoutRow = () => {\r\n  return (\r\n    <div style={{ display: \"flex\", paddingLeft: '10px' }}>\r\n      <SkeletonElement type=\"avatar\" />\r\n      <div style={{ width: \"100%\" ,paddingLeft:'10px',paddingRight:'10px'}}>\r\n        <SkeletonElement type=\"skeleton-title\" />\r\n        \r\n        <SkeletonElement type=\"text\" />\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SubRedditLayout = () => {\r\n  return <SubRedditLayoutRow />;\r\n};\r\n","import React from \"react\";\r\nimport \"./FloatingBar.css\";\r\nimport { BsReddit } from \"react-icons/bs\";\r\nimport { Link } from \"react-router-dom\";\r\nconst FloatingBar = (props) => {\r\n  const DisplayImg = () => {\r\n    if (props.displayImg === null || props.displayImg === \"\") {\r\n      return <BsReddit className=\"display-icon\" />;\r\n    } else {\r\n      return (\r\n        <img\r\n          className=\"display-icon\"\r\n          src={props.displayImg}\r\n          alt={props.displayName}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scroll-bar-view\">\r\n      <Link className=\"scroll-bar-view\" to={`/subreddit/${props.displayName}`}>\r\n        {DisplayImg()}\r\n        <p>{props.displayName}</p>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FloatingBar;\r\n","import React, { useEffect } from \"react\";\r\nimport SubRowDisplay from \"../SubRowDisplay/SubRowDisplay\";\r\nimport \"./SubReddit.css\";\r\nimport { getAllSubReddit } from \"../../ReduxStore/Reducers/SubRedditSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SubRedditLayout } from \"../SkeletonFolder/SubReddits/SubRedditLayout\";\r\nimport FloatingBar from \"../FloatingBar/FloatingBar\";\r\nexport default function SubReddit(props) {\r\n  const { isLoading, subredditData } = useSelector((state) => {\r\n    return state.subReddit;\r\n  });\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getAllSubReddit());\r\n    return () => {};\r\n  }, []);\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"sub-reddit\" id=\"sub-reddit-display\">\r\n        <div className=\"sub-reddit-title\">\r\n          <p>Sub Reddit</p>\r\n          <hr />\r\n        </div>\r\n        <div>\r\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((index) => {\r\n            return <SubRedditLayout key={index} />;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  let filteredData = subredditData.map((data) => {\r\n    return {\r\n      displayName: data.data.display_name,\r\n      url: data.data.url,\r\n      displayImg: data.data.icon_img,\r\n      key: data.data.id,\r\n      subscribersCount: data.data.subscribers,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"sub-reddit\" id=\"sub-reddit-display\">\r\n        <div className=\"sub-reddit-title\">\r\n          <p style={{}}>Sub Reddit</p>\r\n          <hr />\r\n        </div>\r\n        <div>\r\n          {filteredData.map((data) => {\r\n            return <SubRowDisplay {...data} />;\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"floating-bar\">\r\n        {filteredData.map((data) => {\r\n         \r\n          return <FloatingBar {...data} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ListItem, ListItemText, ListItemIcon } from \"@material-ui/core\";\r\nimport { createTheme, makeStyles } from \"@material-ui/core/styles\";\r\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\r\nimport DynamicFeedIcon from \"@material-ui/icons/DynamicFeed\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./FilterPage.css\";\r\n\r\nconst filterOptions = [\r\n  { name: \"all\", path: \"/\", icon: <DynamicFeedIcon /> },\r\n  { name: \"hot\", path: \"/filter/hot\", icon: <WhatshotIcon /> },\r\n  { name: \"new\", path: \"/filter/new\", icon: <DescriptionIcon /> },\r\n  { name: \"rising\", path: \"/filter/rising\", icon: <TrendingUpIcon /> },\r\n  { name: \"top\", path: \"/filter/top\", icon: <EqualizerIcon /> },\r\n];\r\nconst theme = createTheme();\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  listItem: {\r\n    fontWeight: 500,\r\n    \"&:hover\": {\r\n      background: \"none\",\r\n      \"& .MuiTypography-root\": {\r\n        color: theme.palette.warning.main,\r\n      },\r\n      \"& .MuiListItemIcon-root > svg\": {\r\n        color: theme.palette.warning.main,\r\n      },\r\n    },\r\n  },\r\n  activeLink: {\r\n    textDecoration: \"none\",\r\n    \"& .MuiListItem-root\": {\r\n      background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n      color: \"white\",\r\n      \"& .MuiTypography-root\": {\r\n        color: \"white\",\r\n      },\r\n      \"& .MuiListItemIcon-root > svg\": {\r\n        color: \"white\",\r\n      },\r\n    },\r\n  },\r\n  link: {\r\n    color: theme.palette.text.primary,\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\nconst FilterSide = () => {\r\n  const classes = styles();\r\n\r\n  return (\r\n    <div style={{ textTransform: \"uppercase\", maxWidth: \"100%\" }}>\r\n      {filterOptions.map((data, index) => {\r\n        return (\r\n          <NavLink\r\n            className={(isActive) =>\r\n              isActive.isActive ? classes.activeLink : classes.link\r\n            }\r\n            to={data.path}\r\n            key={data.name}\r\n          >\r\n            <ListItem\r\n              key={index}\r\n              style={{ maxWidth: \"100%\", padding: \"5px 0\" }}\r\n            >\r\n              <ListItemIcon>{data.icon}</ListItemIcon>\r\n              <ListItemText style={{ maxWidth: \"100%\" }}>\r\n                {data.name}\r\n              </ListItemText>\r\n            </ListItem>\r\n          </NavLink>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default FilterSide;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getsubredditAbout } from \"../../../ReduxStore/Reducers/SubRedditAboutSlice\";\r\nimport { numberFormat } from \"../../../Helper/NumberFormat\";\r\nimport { getTimeDate } from \"../../../Helper/time\";\r\nimport { FaBirthdayCake } from \"react-icons/fa\";\r\nimport \"./AboutCard.css\";\r\nconst AboutCard = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isLoading,subredditaboutData } = useSelector(\r\n    (state) => state.subredditAbout\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getsubredditAbout(props.about));\r\n  }, []);\r\n  if (isLoading) {\r\n    return <div>Loading</div>;\r\n  }\r\n  const data = subredditaboutData.data;\r\n\r\n  const section = () => {\r\n    return (\r\n      <div>\r\n        {data.public_description === \"\" ? (\r\n          <p>Welcome to {data.title}</p>\r\n        ) : (\r\n          <p>{data.public_description}</p>\r\n        )}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n            marginLeft:'5px'\r\n          }}\r\n        >\r\n          <div className=\"about-subscribers\">\r\n            <div>{numberFormat(data.subscribers)}</div>\r\n            <p>Members</p>\r\n          </div>\r\n          <div className=\"about-subscribers\">\r\n            <div>{numberFormat(data.accounts_active)}</div>\r\n            <p>Online</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"subreddit-about\">\r\n      <div className=\"about-title\">\r\n        <p>About {data.display_name} Community</p>\r\n      </div>\r\n      <section className=\"about-section\">{section()}</section>\r\n      <div className=\"about-footer\">\r\n        <FaBirthdayCake />\r\n        <p>&nbsp;Created</p>\r\n        <p>&nbsp;{getTimeDate(data.created * 1000)[0]}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutCard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getuserAbout } from \"../../../ReduxStore/Reducers/userAboutSlice\";\r\nimport \"./UserCard.css\";\r\nimport { GiCakeSlice } from \"react-icons/gi\";\r\nimport { BsFlower2 } from \"react-icons/bs\";\r\nimport { getTimeDate } from \"../../../Helper/time\";\r\nimport { numberFormat } from \"../../../Helper/NumberFormat\";\r\n\r\nconst UserCard = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, useraboutData } = useSelector((state) => state.userAbout);\r\n\r\n  useEffect(() => {\r\n    dispatch(getuserAbout(props.username));\r\n  }, []);\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  const banner_img = (url) => {\r\n    let split = url.split(/(jpg|jpeg|png|gif|bmp)/);\r\n    const joinedstring = split[0] + split[1];\r\n    return joinedstring;\r\n  };\r\n  const userData = useraboutData.data;\r\n\r\n  return (\r\n    <div className=\"user-about\">\r\n      <div className=\"banner-image\">\r\n        {userData.subreddit.banner_img && (\r\n          <img\r\n            className=\"banner-image\"\r\n            src={banner_img(userData.subreddit.banner_img)}\r\n            alt=\"banner_img\"\r\n          />\r\n        )}\r\n      </div>\r\n      <section style={{ zIndex: 100 }}>\r\n        <div className=\"user-icon\">\r\n          <img\r\n            style={{ height: \"200px\", paddingBottom: \"10px\" }}\r\n            src={\r\n              userData.snoovatar_img\r\n                ? userData.snoovatar_img\r\n                : \"https://www.redditstatic.com/avatars/defaults/v2/avatar_default_1.png\"\r\n            }\r\n            alt=\"snoovatar_img\"\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontWeight: \"bold\",\r\n            fontSize: \"1.2rem\",\r\n          }}\r\n        >\r\n          {userData.name}\r\n        </div>\r\n        <p className=\"user-description\">\r\n          {userData.subreddit.public_description}\r\n        </p>\r\n        <div className=\"user-midsection\">\r\n          <div className=\"karma\">\r\n            <p>Karma</p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <BsFlower2 />\r\n              &nbsp;{numberFormat(userData.comment_karma)}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"karma\">\r\n            <p>Cake Day</p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <GiCakeSlice />\r\n              &nbsp;{getTimeDate(userData.created * 1000)[0]}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\nimport \"./SideBar.css\";\r\nimport SubReddit from \"../SubReddit/SubReddit\";\r\nimport FilterSide from \"../FilterPage/FilterPage\";\r\nimport AboutCard from \"../Card/AboutCard/AboutCard\";\r\nimport UserCard from \"../Card/UserCard/UserCard\";\r\nconst SideBar = (props) => {\r\n  return (\r\n    <div>\r\n    <div className=\"side-bar\">\r\n      {props.filter && <FilterSide />}\r\n      {props.about && <AboutCard about={props.subreddittype} />}\r\n      {props.user && <UserCard username={props.username} />}\r\n      <SubReddit  />\r\n    </div>\r\n    <div className='sidebar-subreddit'>\r\n    <SubReddit  />\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport SideBar from \"../SideBar/SideBar\";\r\nimport './ComponentLayout.css'\r\n\r\nconst ComponentLayout = (props) => {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <main className='main-content'>\r\n          <section className='section-content'>\r\n              {props.children}\r\n          </section>\r\n          <SideBar {...props.sideBarProps}/>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComponentLayout;\r\n","import React from \"react\";\r\nimport SkeletonElement from \"../Layouts/Skeleton\";\r\nimport \"./CardLayout.css\";\r\n\r\nconst CardLayout = (props) => {\r\n  return (\r\n    <div className=\"card-layout\">\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"flex-start\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <SkeletonElement type=\"avatar\" />\r\n\r\n        <SkeletonElement type=\"spantext\" />\r\n        <SkeletonElement type=\"spantext\" />\r\n        <SkeletonElement type=\"spantext\" />\r\n      </div>\r\n\r\n      <SkeletonElement type=\"skeleton-title\" />\r\n      <div style={{paddingRight:'10px'}}>\r\n      <SkeletonElement type=\"text\" />\r\n      <SkeletonElement type=\"text\" />\r\n      <SkeletonElement type=\"text\" />\r\n      </div>\r\n      <SkeletonElement type=\"skeleton-content\" />\r\n      <div style={{ display: \"flex\", justifyContent: \"space-evenly\" }}>\r\n        <SkeletonElement type=\"button\" />\r\n        <SkeletonElement type=\"button\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardLayout;\r\n","import React from \"react\";\r\n\r\nconst ErrorCard = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        fontSize: \"3rem\",\r\n        backgroundColor: \" #FFCCCC\",\r\n        margin: \"20px\",\r\n      }}\r\n    >\r\n      {\r\n        props.error&&<div>\r\n          <p>Your connection is currently offline!</p>\r\n          <p>{props.error}</p>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./Post.css\";\r\n\r\nexport default function Post(props) {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const data = props.postData;\r\n   \r\n    const filterdata = data.filter((data) => data.kind === \"t3\");\r\n    const filteredData = filterdata.map((data) => {\r\n     \r\n      return {\r\n        author: data.data.author,\r\n        title: data.data.title,\r\n        url: data.data.url,\r\n        thumbnail: data.data.thumbnail,\r\n        ups: data.data.score,\r\n        upvoteRatio: data.data.upvote_ratio,\r\n        comments: data.data.permalink,\r\n        post_hint: data.data.post_hint,\r\n        isGallery: data.data.is_gallery,\r\n        galleryData: data.data.gallery_data,\r\n        subreddit: data.data.subreddit,\r\n        selfText: data.data.selftext,\r\n        hsl_video: data.data.secure_media,\r\n        id: data.data.id,\r\n        created: data.data.created_utc,\r\n        numComments: data.data.num_comments,\r\n      };\r\n    });\r\n    setData(filteredData);\r\n    return () => {};\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"post-container\" id=\"post\">\r\n      {data.map((data, index) => {\r\n        return <Card key={index} data={data} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { subreddit } from \"../../API_Calls/RedditApiCalls\";\r\n\r\nexport const getAllSubReddit = createAsyncThunk(\r\n  \"subreddit/getAllSubReddit\",\r\n  async (param = \"\", thunkAPI) => {\r\n    const response = await subreddit();\r\n    return response;\r\n  }\r\n);\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  subredditData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nexport const getSubRedditSlice = createSlice({\r\n  name: \"subreddits\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getAllSubReddit.pending]: (state) => {\r\n      state.isError = false;\r\n      state.isLoading = true;\r\n    },\r\n    [getAllSubReddit.fulfilled]: (state, action) => {\r\n      state.isError = false;\r\n      state.isLoading = false;\r\n      state.subredditData = action.payload;\r\n      state.status = \"succeeded\";\r\n    },\r\n    [getAllSubReddit.rejected]: (state, action) => {\r\n      state.isError = true;\r\n      state.error = action.error;\r\n      state.isLoading = false;\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const subredditReducer = getSubRedditSlice.reducer;\r\n","\r\nimport { subredditAbout } from \"../../API_Calls/RedditApiCalls\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getsubredditAbout = createAsyncThunk(\r\n  \"subreddit/subredditAbout\",\r\n  async (param, thunkAPI) => {\r\n    const response = await subredditAbout(param);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  subredditaboutData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nexport const getSubRedditAboutSlice = createSlice({\r\n  name: \"subreddits\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getsubredditAbout.pending]: (state) => {\r\n      state.isError = false;\r\n      state.isLoading = true;\r\n    },\r\n    [getsubredditAbout.fulfilled]: (state, action) => {\r\n      state.isError = false;\r\n      state.isLoading = false;\r\n      state.subredditaboutData = action.payload;\r\n      state.status = \"succeeded\";\r\n    },\r\n    [getsubredditAbout.rejected]: (state, action) => {\r\n      state.isError = true;\r\n      state.error = action.error;\r\n      state.isLoading = false;\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const subredditAboutReducer = getSubRedditAboutSlice.reducer;\r\n","\r\nimport { userAbout } from \"../../API_Calls/RedditApiCalls\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getuserAbout = createAsyncThunk(\r\n  \"user/userAbout\",\r\n  async (param, thunkAPI) => {\r\n    const response = await userAbout(param);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  useraboutData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nexport const getuserAboutSlice = createSlice({\r\n  name: \"users\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getuserAbout.pending]: (state) => {\r\n      state.isError = false;\r\n      state.isLoading = true;\r\n    },\r\n    [getuserAbout.fulfilled]: (state, action) => {\r\n      state.isError = false;\r\n      state.isLoading = false;\r\n      state.useraboutData = action.payload;\r\n      state.status = \"succeeded\";\r\n    },\r\n    [getuserAbout.rejected]: (state, action) => {\r\n      state.isError = true;\r\n      state.error = action.error;\r\n      state.isLoading = false;\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const userAboutReducer = getuserAboutSlice.reducer;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./Card.css\";\r\nimport Hls from \"hls.js\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport { BsLink } from \"react-icons/bs\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport VideoPlayer from \"react-video-js-player\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getTimeDate, postCreation } from \"../../Helper/time\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ModeCommentIcon from \"@material-ui/icons/ModeComment\";\r\nimport { numberFormat } from \"../../Helper/NumberFormat\";\r\nimport { useLocation } from \"react-router-dom\";\r\nconst Card = (props) => {\r\n  let [data, setData] = useState(null);\r\n\r\n  var hls = null;\r\n\r\n  useEffect(() => {\r\n    setData(props.data);\r\n  }, []);\r\n  const { pathname } = useLocation();\r\n\r\n  let videoElement = useRef();\r\n\r\n  useEffect(() => {\r\n    if (Hls.isSupported) {\r\n      hls = new Hls();\r\n    }\r\n    if (videoElement.current !== undefined) {\r\n      const video_url = data.hsl_video.reddit_video.hls_url;\r\n      hls.loadSource(video_url);\r\n      hls.attachMedia(videoElement.current);\r\n    }\r\n  }, [data]);\r\n  /** Set Post time in seonds hours days and month**/\r\n  function get_date(date) {\r\n    const get_data = getTimeDate(date);\r\n    return postCreation(get_data);\r\n  }\r\n  const thumbnail = () => {\r\n    const pattern = /(jpg|jpeg|png|gif|bmp)/;\r\n\r\n    const image = new Image();\r\n    if (data.url.match(pattern)) {\r\n      image.src = data.url;\r\n      const height = image.height;\r\n     \r\n      if (height > 0) {\r\n        return <Avatar alt={data.title} src={data.url} />;\r\n      } else {\r\n        return <Avatar>{data.author[0].toUpperCase()}</Avatar>;\r\n      }\r\n    } else {\r\n      return <Avatar>{data.author[0].toUpperCase()}</Avatar>;\r\n    }\r\n  };\r\n  const sectiondata = () => {\r\n    const image = new Image();\r\n    const comment = /comments/;\r\n\r\n    if (data.post_hint === \"image\") {\r\n      image.src = data.url;\r\n    }\r\n    if (data.post_hint === \"image\" && data.isGallery === undefined) {\r\n      return <img className=\"section-image\" src={data.url} alt=\"none\" />;\r\n    }\r\n\r\n    if (data.post_hint === undefined && data.selfText.length !== 0) {\r\n      if (pathname.match(comment)) {\r\n        return (\r\n          <p\r\n            style={{\r\n              WebkitLineClamp: \"none\",\r\n              fontSize: \"0.8rem\",\r\n              margin: \"0 0 0.2rem 0.2rem\",\r\n            }}\r\n          >\r\n            {data.selfText}\r\n          </p>\r\n        );\r\n      }\r\n      return (\r\n        <p style={{ WebkitLineClamp: 2 }} className=\"selfText\">\r\n          {data.selfText.substring(0, 100)}...\r\n        </p>\r\n      );\r\n    }\r\n    if (\r\n      data.post_hint === undefined &&\r\n      data.selfText.length === 0 &&\r\n      !data.url.match(comment)\r\n    ) {\r\n      return (\r\n        <div className=\"section-link\">\r\n          <a rel=\"noopener\" target=\"_blank\" href={data.url}>\r\n            <div className=\"external-link\">\r\n              <BsLink style={{ paddingRight: 5 }} />\r\n              External Link\r\n            </div>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n    if (data.post_hint === \"link\") {\r\n      return (\r\n        <div className=\"section-link\">\r\n          <a rel=\"noopener\" href={data.url}>\r\n            <div className=\"external-link\">\r\n              <BsLink style={{ paddingRight: 5 }} />\r\n              External Link\r\n            </div>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (data.post_hint === \"hosted:video\") {\r\n      return (\r\n        <Waypoint\r\n          onEnter={() => {\r\n            if (videoElement.current !== undefined) {\r\n              const play = videoElement.current.play();\r\n\r\n              if (play !== undefined) {\r\n                play.then(() => videoElement.current.play()).catch((err) => {});\r\n              }\r\n            }\r\n          }}\r\n          onLeave={() => {\r\n            if (videoElement.current !== undefined) {\r\n              const pause = videoElement.current.pause();\r\n              if (pause !== undefined) {\r\n                pause\r\n                  .then(() => videoElement.current.pause())\r\n                  .catch((err) => {});\r\n                {\r\n                }\r\n              }\r\n            }\r\n          }}\r\n          topOffset=\"30%\"\r\n          bottomOffset=\"50%\"\r\n        >\r\n          <div\r\n            className=\"section-video\"\r\n            onClick={() => {\r\n              if (videoElement.current !== undefined) {\r\n                videoElement.current.muted = !videoElement.current.muted;\r\n              }\r\n            }}\r\n          >\r\n            <video\r\n              style={{ margin: \"auto\", maxHeight: \" 500px\", maxWidth: \"560px\" }}\r\n              preload=\"auto\"\r\n              ref={(video) => {\r\n                videoElement.current = video;\r\n              }}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              type=\"application/x-mpegurl\"\r\n              volume={1}\r\n            ></video>\r\n          </div>\r\n        </Waypoint>\r\n      );\r\n    }\r\n  };\r\n\r\n  const comment_num = () => {\r\n    if (props.nolink) {\r\n      return (\r\n        <div className=\"comment-num\">\r\n          <ModeCommentIcon />\r\n          {numberFormat(data.numComments)}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Link\r\n          style={{ textDecoration: \"none\", color: \"black\" }}\r\n          to={{\r\n            pathname: `/${data.subreddit}/comments/${data.id}`,\r\n          }}\r\n        >\r\n          <div className=\"comment-num\">\r\n            <ModeCommentIcon />\r\n            {numberFormat(data.numComments)}\r\n          </div>\r\n        </Link>\r\n      );\r\n    }\r\n  };\r\n\r\n  const sectionTitle = () => {\r\n    if (props.nolink) {\r\n      return <h4 className=\"title\">{data.title}</h4>;\r\n    } else {\r\n      return (\r\n        <Link\r\n          style={{ textDecoration: \"none\", color: \"black\" }}\r\n          to={{\r\n            pathname: `/${data.subreddit}/comments/${data.id}`,\r\n          }}\r\n        >\r\n          <h4 className=\"title\">{data.title}</h4>\r\n        </Link>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {data && (\r\n        <div className=\"card\">\r\n          <div className=\"header\">\r\n            {thumbnail()}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                lineHeight: \"0rem\",\r\n              }}\r\n            >\r\n              <Link\r\n                className=\"card-subreddit\"\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n                to={`/subreddit/${data.subreddit}`}\r\n              >\r\n                <p>{data.subreddit}</p>\r\n              </Link>\r\n              <p style={{ color: \"grey\" }}> posted by </p>{\" \"}\r\n              <Link\r\n                className=\"card-author\"\r\n                style={{ textDecoration: \"none\", color: \"grey\" }}\r\n                to={`/user/${data.author}`}\r\n              >\r\n                <p>{data.author}</p>\r\n              </Link>\r\n              <p style={{ color: \"grey\" }}>\r\n                &nbsp;{get_date(data.created * 1000)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"section\">\r\n            {sectionTitle()}\r\n            {sectiondata()}\r\n          </div>\r\n\r\n          <footer className=\"card-footer\">\r\n            <div className=\"upVote\">\r\n              <ArrowUpwardIcon />\r\n              {numberFormat(data.ups)}\r\n              <ArrowDownwardIcon />\r\n            </div>\r\n            {comment_num()}\r\n          </footer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchPostData } from \"../../API_Calls/RedditApiCalls\";\r\n\r\nexport const getAllPosts = createAsyncThunk(\r\n  \"posts/getAllPosts\",\r\n  async (param = \"\", thunkAPI) => {\r\n    const response = await fetchPostData(param);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  postsData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\nexport const PostsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getAllPosts.pending]: (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    },\r\n    [getAllPosts.fulfilled]: (state, action) => {\r\n      state.isError = false;\r\n      state.isLoading = false;\r\n      state.status = \"succeeded\";\r\n      state.postsData = action.payload;\r\n    },\r\n    [getAllPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.error = action.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const postsReducer = PostsSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { commentFetch } from \"../../API_Calls/RedditApiCalls\";\r\n\r\nexport const getComments = createAsyncThunk(\r\n  '\"comment/getAllComments',\r\n  async (param, thunkAPI) => {\r\n    const response = await commentFetch(param);\r\n    return response;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  isLoading: true,\r\n  commentData: [],\r\n  isError: \"null\",\r\n  error: \"\",\r\n};\r\n\r\nexport const commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getComments.pending]: (state) => {\r\n      state.isLoading = true;\r\n      state.isError = false;\r\n    },\r\n    [getComments.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.status = \"succeeded\";\r\n      state.commentData = action.payload;\r\n    },\r\n    [getComments.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.status = \"failed\";\r\n      state.error = action.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const commentReducer = commentSlice.reducer"],"sourceRoot":""}